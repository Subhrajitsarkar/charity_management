// controllers/donationController.js

const Razorpay = require('razorpay');
const { Op } = require('sequelize');
const Donation = require('../models/donationModel');
const Charity = require('../models/charityModel');
const { uploadToS3 } = require('../services/S3services');
const { sendDonationConfirmation } = require('../services/notificationService');
const User = require('../models/userModel');

const rzp = new Razorpay({
    key_id: process.env.RAZORPAY_KEY_ID,
    key_secret: process.env.RAZORPAY_KEY_SECRET
});

exports.createOrder = async (req, res) => {
    try {
        const userId = req.user.userId;
        const { charityId, amount } = req.body;
        if (!charityId || !amount) throw new Error('Charity ID and amount are required');

        const charity = await Charity.findByPk(charityId);
        if (!charity) throw new Error('Charity not found');

        const options = {
            amount: parseInt(amount * 100), // in paise
            currency: 'INR',
            receipt: `rcpt_${Date.now()}`
        };

        const order = await rzp.orders.create(options);
        const donation = await Donation.create({
            userId,
            charityId,
            amount,
            orderId: order.id,
            paymentStatus: 'PENDING'
        });

        return res.status(201).json({
            order,
            key_id: process.env.RAZORPAY_KEY_ID,
            donationId: donation.id
        });
    } catch (err) {
        console.error('Error creating donation order:', err);
        return res.status(500).json({ error: err.message });
    }
};

exports.updateTransaction = async (req, res) => {
    try {
        const { order_id, payment_id, status } = req.body;
        if (!order_id) throw new Error('order_id is required');

        const donation = await Donation.findOne({ where: { orderId: order_id } });
        if (!donation) return res.status(404).json({ error: 'Donation record not found' });

        if (status === 'FAILED') {
            donation.paymentStatus = 'FAILED';
            await donation.save();
            return res.status(200).json({
                message: 'Donation updated to FAILED',
                donation
            });
        }

        if (!payment_id) throw new Error('payment_id is required');
        donation.paymentId = payment_id;
        donation.paymentStatus = 'SUCCESS';
        await donation.save();

        // Send confirmation email after successful payment
        const user = await User.findByPk(donation.userId);
        const charity = await donation.getCharity();//getCharity() method is automatically generated by Sequelize due to the association
        if (user && charity) {
            await sendDonationConfirmation(user.email, {
                amount: donation.amount,
                charityName: charity.name,
                date: donation.date,
                paymentStatus: donation.paymentStatus
            });
        }

        return res.status(200).json({
            message: 'Donation successful',
            donation
        });
    } catch (err) {
        console.error('Error updating donation transaction:', err);
        return res.status(500).json({ error: err.message });
    }
};

exports.getDonationHistory = async (req, res) => {
    try {
        const userId = req.user.userId;
        const donations = await Donation.findAll({
            where: { userId },
            include: [{ model: Charity, attributes: ['name'] }]
        });
        return res.json(donations);
    } catch (err) {
        return res.status(500).json({ error: err.message });
    }
};

exports.downloadDonationHistory = async (req, res) => {
    try {
        const userId = req.user.userId;
        const donations = await Donation.findAll({
            where: { userId },
            include: [{ model: Charity, attributes: ['name'] }]
        });

        if (!donations.length) {
            return res.status(404).json({ error: 'No donation history found' });
        }

        // Build CSV without the donation ID
        let csvData = 'CharityName,Amount,Date,PaymentStatus\n';
        donations.forEach(donation => {
            const charityName = donation.charity ? donation.charity.name : '';
            csvData += `${charityName},${donation.amount},${donation.date},${donation.paymentStatus}\n`;
        });

        const filename = `donationHistory_${Date.now()}.csv`;
        const fileURL = await uploadToS3(csvData, filename);
        return res.status(200).json({ fileURL });
    } catch (err) {
        console.error('Error in downloadDonationHistory:', err);
        return res.status(500).json({ error: err.message });
    }
};

// Only show charities that have isApproved = true
exports.searchCharities = async (req, res) => {
    try {
        const { q } = req.query;

        // Find all approved charities matching the search query in one of the fields.
        const charities = await Charity.findAll({
            where: {
                isApproved: true,
                [Op.or]: [
                    { name: { [Op.like]: `%${q}%` } },
                    { mission: { [Op.like]: `%${q}%` } },
                    { location: { [Op.like]: `%${q}%` } },
                    { category: { [Op.like]: `%${q}%` } }
                ]
            }
        });
        return res.json(charities);
    } catch (err) {
        console.error("Error in searchCharities:", err);
        return res.status(400).json({ error: err.message });
    }
};
